name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_chroma:
        description: 'Run Chroma integration job (true/false)'
        required: false
        default: 'false'

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.10, 3.11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # prefer pinned lockfile when present for reproducible builds
          if [ -f requirements-lock.txt ]; then pip install -r requirements-lock.txt; else pip install -r requirements.txt; fi
          pip install ruff mypy

      - name: Validate requirements-lock.txt
        # Regenerate and ensure it matches the committed lockfile to avoid drift
        run: |
          python -m pip install --upgrade pip pip-tools
          python -m piptools compile --output-file=requirements-lock.txt requirements.txt
          git --no-pager diff --exit-code requirements-lock.txt || (echo "requirements-lock.txt is out of date. Run: python -m piptools compile --output-file=requirements-lock.txt requirements.txt" && exit 1)

      - name: Lint and type-check
        run: |
          ruff check .
          mypy --ignore-missing-imports .

      - name: Run tests
        run: |
          pytest -q

  chroma-integration:
    if: ${{ github.event.inputs.run_chroma == 'true' }}
    runs-on: ubuntu-latest
    needs: test

    services:
      chroma:
        image: chroma/chroma:latest
        ports:
          - 8000:8000
        options: >-
          --health-cmd="curl -f http://localhost:8000/ || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-lock.txt ]; then pip install -r requirements-lock.txt; else pip install -r requirements.txt; fi

      - name: Wait for Chroma
        run: |
          n=0; until curl -sSf http://localhost:8000/ >/dev/null 2>&1 || [ $n -ge 20 ]; do n=$((n+1)); sleep 2; done

      - name: Ensure secret or skip
        env:
          RUN_CHROMA_INTEGRATION: ${{ secrets.RUN_CHROMA_INTEGRATION }}
        run: |
          if [ "$RUN_CHROMA_INTEGRATION" != 'true' ]; then echo "RUN_CHROMA_INTEGRATION secret not set to 'true' - skipping tests"; exit 0; fi

      - name: Run Chroma integration tests
        env:
          RUN_CHROMA_INTEGRATION: '1'
        run: |
          pytest tests/test_chroma_integration.py -q

  pytest:
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        python-version: [3.10, 3.11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pinned dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-lock.txt ]; then pip install -r requirements-lock.txt; else pip install -r requirements.txt; fi
          pip install pytest pytest-mock pytest-asyncio

      - name: Run tests
        run: |
          pytest -q
